#+TITLE: Scientific computing in Python
#+AUTHOR: /Tejaswin Parthasarathy/, Mattia Gazzola
#+SUBTITLE: ME498: Comp. modeling & optimization
#+BEAMER_FRAME_LEVEL: 2
# #+BEAMER_HEADER: \institute[INST]{Institute\\\url{http://www.institute.edu}}
# #+BEAMER_HEADER: \titlegraphic{\includegraphics[height=1.5cm]{test}}

#+startup: beamer
#+LATEX_CLASS: beamer
#+LATEX_CLASS_OPTIONS: [presentation]
# #+LATEX_CLASS_OPTIONS: [notes]
#+LATEX_HEADER:\usetheme[progressbar=frametitle,block=fill]{metropolis}
#+OPTIONS:   H:2 num:t toc:nil ::t |:t ^:{} -:t f:t *:t <:t
#+OPTIONS:   tex:t d:nil todo:t pri:nil tags:nil
#+COLUMNS: %45ITEM %10BEAMER_ENV(Env) %10BEAMER_ACT(Act) %4BEAMER_COL(Col) %8BEAMER_OPT(Opt)

* ~numpy~
** ~numpy~ package [fn:1]
  - High-performance vector, matrix and higher-dimensional data structures for
    ~Python~
  - Shares a lot of similarity and differences (syntactically and semantically)
    with ~MATLAB~ [fn:2]
  - Vectors, matrices and higher-dimensional data sets are /(nd) arrays/ in ~numpy~
    (there is also the ~matrix~ class, but it is being phased out)
  - Standard import---~import numpy as np~
** Simple array creation in ~numpy~
***                                                                  :B_note:
	:PROPERTIES:
	:BEAMER_env: note
	:END:
	- Show the documentaion and how to browse it
	- Show as a demonstration...
***                                                         :B_ignoreheading:
	:PROPERTIES:
	:BEAMER_env: ignoreheading
	:END:
	- ~v = np.array([1,2,3,4])~ creates a vector (argument : list)
	- ~M = np.array([[1, 2], [3, 4]])~ creates a matrix (argument : nested list)
	- ~type(v), type(M)~ both return ~numpy.ndarray~
	- The difference lies in the *shape* seen using ~v.shape/M.shape~...
	- Alternatively use function ~np.shape(v)~
	- Arrays can also have different data types, seen using ~v.dtype~
	  - ~npint32~, ~np.float32~, ~np.float64~ (default)...
	- ~M = np.array([[1, 2], [3, 4]], dtype=int)~
** Array generating functions
***                                                                  :B_note:
	:PROPERTIES:
	:BEAMER_env: note
	:END:
	- Show as a demonstration...
***                                                         :B_ignoreheading:
	:PROPERTIES:
	:BEAMER_env: ignoreheading
	:END:
	- ~v = np.arange(0,11,2)~ gives ranges similar to ~Python's range~
	- ~v = np.arange(0, 11, 0.1)~ is also valid! (gives step of 0.1)
	- ~v = np.linspace(0, 1, 3)~ creates a linearly spaced vector [0, 0.5, 1.]
	- Also have ~logspace, geomspace~ for other progressions
	- Multidimensional array creation using ~meshgrid, ndgrid~ and others
	- Other useful ones are ~ones~ (which generates matrix with all 1), ~zeros~
      (simliar) and ~eye~ (identity matrix)

** Random numbers
***                                                                  :B_note:
	:PROPERTIES:
	:BEAMER_env: note
	:END:
	- Show as a demonstration
	- np.random.rand(5,5)...same syntax for randn too..
	- np.random.randint(1,5,size=(2,4))
***                                                         :B_ignoreheading:
	:PROPERTIES:
	:BEAMER_env: ignoreheading
	:END:
	- We'll work extensively with random numbers, so let's see what ~numpy~ has
      to offer
	- ~np.random.rand(<shape>)~ gives random floats from uniform dist. in [0, 1)
	- ~np.random.randn(<shape>)~ gives random floats from univariate normal
      dist. with \(\mu = 0\) and \(\sigma = 1\)
	- ~np.random.randint(low, high, size)~ gives random ints from discrete uniform dist.
      in ~[low, high)~
** Indexing
***                                                                  :B_note:
	:PROPERTIES:
	:BEAMER_env: note
	:END:
	- Show as a demonstration of all
	- A = np.random.randn(5,5); A[2:3,:] is slicing
	- Fancy indexing: idx_rows = [1,5]; idx_cols = [1,2,4]; A[idx_rows, idx_cols]
	- mask_row = [True, False, False, False, True]; A[mask_row]. Compare with
      A[idx_rows, :] above
***                                                         :B_ignoreheading:
	:PROPERTIES:
	:BEAMER_env: ignoreheading
	:END:
	- Slicing works for ~numpy~ arrays too, across any dimension!
	- Fancy indexing
	  - Extends slicing to be more useful + practical
	- Masking
	  - Bools to /mask/ what is not necessary
	  - Useful with conditional functions (e.g. ~x < 5~)
	- Reshaping using ~np.reshape~ changes index access

** Linear Algebra
***                                                                  :B_note:
	:PROPERTIES:
	:BEAMER_env: note
	:END:
	- In the demo construct structure A with 1:25 using ~A =
      np.linspace(1.0,25.0,25)~ and then do ~A = A.reshape(5,5)~
	- Use ~np.arange~ for constructing ~v=np.arange(0, 5)~
	- Show that ~A*v~ does element wise onlt

***                                                         :B_ignoreheading:
	:PROPERTIES:
	:BEAMER_env: ignoreheading
	:END:
	- Scalar operations on an array ~A~
	  - ~A + 2~, ~A * 2~ , ~A ** 2~ ...
	- Element wise operations on an array ~A~
	  + ~A * A~, ~A / A~ ...
	  + What do you get when you do ~A*v~? *DEMO*
	- Matrix algebra on an array ~A~
	  + ~np.dot(A, v)~ or ~A.dot(v)~ or simply ~A@v~
	  + Shape needs to be compliant! ~numpy~ also has broadcasts that is useful,
        but is confusing and so is not covered here ...

** Practice
*** Please attempt                                                  :B_block:
	:PROPERTIES:
	:BEAMER_env: block
	:END:
	- =12_numpy_library.ipynb=
	- For a more extensive tutorial: https://github.com/donnemartin/data-science-ipython-notebooks#numpy
**                                                                   :B_note:
   :PROPERTIES:
   :BEAMER_env: note
   :END:
- Access to https://github.com/donnemartin/data-science-ipython-notebooks
  especially the numpy section

* Genetic algorithm using ~numpy~
** Schematic
#+LATEX: \footnotesize
#+CAPTION: Schematic of an evolutionary search algorithm
#+ATTR_LATEX: :width 1.0\textwidth
[[file:images/ga_schematic.png]]
** Let's use GA to solve...
*** Problem statement                                               :B_block:
	:PROPERTIES:
	:BEAMER_env: block
	:END:
   Maximize the function \( f(\mathbf{x}) = \sum_{i=1}^{6} w_i x_i \) for a given
   set of weights \( w_i \), with the constraints that \( x_i \; \in \; [-4,4] \;
   \forall \; i\).

   \therefore Domain \(\mathbb{D}\) of the search is \( \mathbb{D}:= [-4,4]^6 \).

   Optimization problem: \(\left(\mathbb{D}, \mathbb{R} , \mathbf{f}, \geq \right)\).
** Representation?
*** Bitvector? Float vector?                                        :B_block:
	:PROPERTIES:
	:BEAMER_env: block
	:END:
	Pick a representation for \( \mathbf{x}\)
***                                                         :B_ignoreheading:
	:PROPERTIES:
	:BEAMER_env: ignoreheading
	:END:
	In any case, ~np.array~ seems useful. You can make a bitvector using
	~np.array(..., dtype=bool)~
** GA parameters
*** Decisions                                                       :B_block:
	:PROPERTIES:
	:BEAMER_env: block
	:END:
	- How long are you going to run your campaign? (Number of generations)
	- How many solutions will you consider in one step? (Population size)
	  - If so, whats your degree of freedom? (How many numbers should you change)
***                                                         :B_ignoreheading:
	:PROPERTIES:
	:BEAMER_env: ignoreheading
	:END:
	All these are just floating point numbers

*** Initialization                                                         :B_block:
	:PROPERTIES:
	:BEAMER_env: block
	:END:
	- How will you initialize your population?

***                                                         :B_ignoreheading:
	:PROPERTIES:
	:BEAMER_env: ignoreheading
	:END:
	Consider the ~np.random~ module...

** Fitness assignment
*** What's your fitness?                                            :B_block:
	:PROPERTIES:
	:BEAMER_env: block
	:END:
	  - Feed in objective function directly?
	  - Competitive fitness between members?
***                                                         :B_ignoreheading:
	:PROPERTIES:
	:BEAMER_env: ignoreheading
	:END:
	Use matrix-vector products and/or slicing to determine fitness
** Selection (for variation)
*** Stochastic / Deterministic
	:PROPERTIES:
	:BEAMER_env: block
	:END:
	  - How many parents do you want to select? Or do you want to leave it up to
        the algorithm?
	  - Deterministic / Stochastic?
		- Remember that stochastic selection is usally used for variation, but
          we do not need to do it necessarily...
	  - Competitive fitness between members?
		- It's definitely a good exercise to learn ~numpy~
***                                                         :B_ignoreheading:
	:PROPERTIES:
	:BEAMER_env: ignoreheading
	:END:
	~np.argsort/np.sort~ is very useful to sort/rank stuff, indexing magic
	needed. The brave souls doing SUS may also need ~searchsorted, cumsum, sum~
	and so on (familiarize yourself with the ~numpy~ documentation)
** Variation
*** Recombination
	:PROPERTIES:
	:BEAMER_env: block
	:END:
	  - What will be your \( p_c \), the rate of recombination?
	  - Is there a limit on the number of offspring you generate?
	  - How to achieve crossover for your representation?
	  - Uniform crossover? N-point crossover? ...
	  - In which gene do you want to effect crossover?
***                                                         :B_ignoreheading:
	:PROPERTIES:
	:BEAMER_env: ignoreheading
	:END:
	Extensively use slicing and index magic. You may use any algorithm (say
	using the ~%~ operator) to select parents.
** Variation
*** Mutation
	:PROPERTIES:
	:BEAMER_env: block
	:END:
	  - What will be your \( p_m \), the rate of mutation?
	  - How do you want to achieve mutation? Flip bits? Number exchange? Random numbers?
	  - Do you want to mutate the entire vector? Or only one gene?
***                                                         :B_ignoreheading:
	:PROPERTIES:
	:BEAMER_env: ignoreheading
	:END:
	~np.random~ once again. You can also use other ~np~ tools
** Selection (environmental)
*** Constraints / Deterministic schemes
	:PROPERTIES:
	:BEAMER_env: block
	:END:
	  - What about constraints of \( -4 \leq x_i \leq 4 \)?
	  - How do you select individuals (chromosomes) from the population to
        propogate to the next generation? Objective function alone?
	  - If so what scheme do you want to use? \( \left( \mu, \lambda \right) \),
        \( \left( \mu + \lambda \right) \),...?
***                                                         :B_ignoreheading:
	:PROPERTIES:
	:BEAMER_env: ignoreheading
	:END:
	All the tools seen above apply to this case too...
** Putting it all together
*** Convergence, performance, diagnostics
	:PROPERTIES:
	:BEAMER_env: block
	:END:
	  - Now that we have all the /modules/, how do they perform when you put
        them together?
	  - How do we track performance as generations progress?
	  - Can you think of some diagnostics that may well-characterize the scheme
        that you have just developed?
** Practice
*** Exploration
	:PROPERTIES:
	:BEAMER_env: block
	:END:
	  - Explore representations, parameters and all other design choices that you
        made
      - You will essentially be doing a scaled up version of this exercise for
        your project 1
* Footnotes

[fn:2] [[https://docs.scipy.org/doc/numpy/user/numpy-for-matlab-users.html][numpy for Matlab users]]

[fn:1] [[https://www.numpy.org/][numpy]]
